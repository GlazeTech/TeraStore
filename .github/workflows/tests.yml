# Heavily inspired by https://jacobian.org/til/github-actions-poetry/
name: tests
run-name: Application tests
on:
  - pull_request

env:
  IMAGE_NAME: ghcr.io/glazetech/terastore/terastore-backend-test
  POSTGRES_USER: pg_user
  POSTGRES_PASSWORD: pg_user_pw
  POSTGRES_DB: terastore-db
  ENV: test

jobs:
  backend_check_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Check if image exists
        id: check-image
        run: |
          docker manifest inspect ${{ env.IMAGE_NAME }} && echo "exists=true" || echo "exists=false"
        env:
          exists: false
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          file: 'docker/Dockerfile.backend.test'
          tags: |
            ${{ env.IMAGE_NAME }}:latest
        if: steps.cache-deps.outputs.cache-hit != true || steps.check-image.outputs.exists == 'false'

  backend_tests:
    strategy:
      fail-fast: false
      matrix:
        test: [black, ruff, mypy, pytest]
    needs: backend_check_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Pull Docker Image
        run: docker pull ${{ env.IMAGE_NAME }}:latest

      - name: Start application
        run: docker-compose -f docker-compose-test.yml up --detach

      - name: Run Test
        run: ./scripts/run_${{ matrix.test }}.sh

      - name: Close application
        run: docker-compose -f docker-compose-test.yml down
  frontend-linting-formatting:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Biome
        uses: biomejs/setup-biome@v1
        with:
          version: 1.2.2
      - name: Run Biome
        run: biome ci frontend
  frontend-test:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Use Node.js v18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - name: Install dependencies
        run: npm --prefix frontend/ clean-install
      - name: Build app
        run: npm --prefix frontend/ run build
      - name: Test app
        run: npm --prefix frontend/ run test
  docker-test-build:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: [backend_tests, frontend-test]
    env:
      POSTGRES_USER: pg_user
      POSTGRES_PASSWORD: pg_user_pw
      POSTGRES_DB: terastore-db
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build containers
        run: docker-compose build
      - name: Start application
        run: docker-compose up --detach
      - name: Close application
        run: docker-compose down
